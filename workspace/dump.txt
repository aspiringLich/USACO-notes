#include <bits/stdc++.h>
#include <unordered_set>
using namespace std;

using ll = long long;
using ld = long double;
using ull = unsigned long long;

#define repeat(_i, _x) for (int _i = 0; _i < (_x); ++_i)
#define for_range(_i, _start, _end, _itr)                                      \
    for (int _i = (_start); _i < (_end); _i += _itr)

void setIO(const string str = "") {
    ios::sync_with_stdio(false);
#ifdef LOCAL // compile with -DLOCAL
    cout << "compiled locally" << endl;
    if (str.empty())
        freopen("test.in", "r", stdin);
    else {
        freopen((str + ".in").c_str(), "r", stdin);
    }
#else
    if (!str.empty()) {
        freopen((str + ".in").c_str(), "r", stdin);
        freopen((str + ".out").c_str(), "w", stdout);
    }
#endif
}

#define _range(_x) _x.begin(), _x.end()
#define _rrange(_x) _x.rbegin(), _x.rend()

int problem(string input, string output) {
    // character <x> needs to transform into character <y>
    // map<char, vector<char>> keys;
    map<char, char> map;
    set<char> contained;

    for (int i = 0; i < input.size(); i++) {
        char in = input[i];
        char out = output[i];

        contained.insert(in);
        // if weve seen this character before and the output is not the same
        if (map.count(in) != 0 && out != map[in]) {
            return -1;
        }
        if (in == out) {
            continue;
        }
        map[in] = out;
    }

    int count = 0;
    set<char> already_checked;
    set<char> cycles;
    // find cycles
    for (char c : contained) {
        // if weve seen this character before
        if (already_checked.count(c) != 0)
            continue;
        already_checked.insert(c);

        set<char> visited;
        while (visited.count(c) == 0) {
            visited.insert(c);
            already_checked.insert(c); 
            
            if (map.count(c) == 0 || cycles.count(c)) {
                // break but more
                goto out;
            }
            c = map[c];
        }
        // found a cycle
        // we resolve by switching one character to a surrogate one
        set_union(_range(visited), _range(cycles), inserter(cycles, cycles.begin()));
        count++;
    out:;
    }

    return count + map.size();
}

int main() {
    setIO();

    int cases;
    cin >> cases;

    repeat(i, cases) {
        string input, output;
        cin >> input >> output;

        cout << problem(input, output) << endl;
    }
}

5
abc
abc
BBC
ABC
abc
bbc
ABCD
BACD
ABCDEFGIHHHHMMM
BCDAABCHHHHHMMM